name: Migration Check

on:
  pull_request:
    paths:
      - 'user/**'
      - 'task/**'
    types: [opened, synchronize, reopened]

env:
  MIGRATION_TARGETS: |
    {
      "user": {
        "name": "user",
        "directory": "user",
        "pattern": "^V[0-9]+__(.+)\\\\.sql$",
        "description": "Flyway user migrations"
      },
      "task": {
        "name": "task",
        "directory": "task",
        "pattern": "^([0-9]+)\\\\.sql$",
        "description": "Atlas task migrations"
      }
    }

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect migration changes
        id: detect-changes
        run: |
          echo "Detecting all added SQL files..."
          all_added_sql_files=$(git diff --name-only --diff-filter=A ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep '\.sql$' || true)
          
          if [ -z "$all_added_sql_files" ]; then
            echo "No SQL files were added in this pull request."
            echo "changed_targets_count=0" >> $GITHUB_OUTPUT
            echo "changed_targets_config={}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Found SQL files:"
          echo "$all_added_sql_files"
          
          chmod +x scripts/detect-migration-targets.sh
          affected_targets_array=$(echo "$all_added_sql_files" | tr '\n' ' ' | xargs ./scripts/detect-migration-targets.sh "$MIGRATION_TARGETS")
          
          echo "Affected targets: $affected_targets_array"
          
          changed_targets_json=$(echo "$affected_targets_array" | jq -r '.[]' | while read -r target_key; do

            target_config=$(echo "$MIGRATION_TARGETS" | jq -r ".$target_key")
            target_dir=$(echo "$target_config" | jq -r '.directory')
            
            files_for_target=$(echo "$all_added_sql_files" | grep "^$target_dir/")
            target_files_array=$(echo "$files_for_target" | jq -R '.' | jq -s '.')
            
            echo "$target_config" | jq --arg key "$target_key" --argjson files "$target_files_array" '
              {($key): (. + {files: $files})}
            '
          done | jq -s 'add // {}')
          
          changed_count=$(echo "$changed_targets_json" | jq 'length')
          
          echo "changed_targets_count=$changed_count" >> $GITHUB_OUTPUT
          echo "changed_targets_config<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_targets_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Mixed target changes detected
        if: steps.detect-changes.outputs.changed_targets_count > 1
        run: |
          echo "Mixed migration target changes detected - cannot process multiple targets."
          echo "[]"
      
      - name: Process migration target changes
        if: steps.detect-changes.outputs.changed_targets_count == 1
        run: |
          chmod +x scripts/extract-migration-descriptions.sh
          
          changed_targets_config='${{ steps.detect-changes.outputs.changed_targets_config }}'
          
          target_key=$(echo "$changed_targets_config" | jq -r 'keys[0]')
          target_config=$(echo "$changed_targets_config" | jq -r --arg key "$target_key" '.[$key]')
          
          target_pattern=$(echo "$target_config" | jq -r '.pattern' | sed 's/\\\\/\\/g')
          files_array=$(echo "$target_config" | jq -r '.files')
          migration_files=$(echo "$files_array" | jq -r 'join(" ")')
          descriptions=$(./scripts/extract-migration-descriptions.sh "$target_pattern" $migration_files)
          
          file_description_mapping=$(echo "$files_array" | jq -r '.[]' | nl -nln | while read -r index file; do
            description=$(echo "$descriptions" | jq -r ".[$((index-1))]")
            echo "{\"file\": \"$file\", \"description\": \"$description\"}"
          done | jq -s '.')
          
          echo "File-description mapping:"
          echo "$file_description_mapping"
          
          # Output the final JSON mapping
          echo "file_description_mapping<<EOF" >> $GITHUB_OUTPUT
          echo "$file_description_mapping" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: process-migrations
      
      - name: Output file-description mapping
        if: steps.detect-changes.outputs.changed_targets_count == 1
        run: |
          file_description_mapping='${{ steps.process-migrations.outputs.file_description_mapping }}'
          
          echo "Final file-description mapping:"
          echo "$file_description_mapping"
      
      - name: No migration changes found
        if: steps.detect-changes.outputs.changed_targets_count == 0
        run: |
          echo "No migration file changes detected."
          echo "[]"
          